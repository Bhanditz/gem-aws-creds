{"name":"AWS::Creds","tagline":"Easily manipulate and access AWS credentials","body":"# AWS::Creds\r\n\r\nAWS::Creds exposes your AWS credentials through a command line utility and a Ruby API.\r\n\r\n**As-is:** This project is not actively maintained or supported.\r\nWhile updates may still be made and we welcome feedback, keep in mind we may not respond to pull requests or issues quickly.\r\n\r\n**Let us know!** If you fork this, or if you use it, or if it helps in anyway, we'd love to hear from you! opensource@airbnb.com\r\n\r\n## Why?\r\n\r\nThere is plenty to get wrong when handling credentials:\r\n\r\n- When storing them on disk, only your user should be able to read it. awscreds will raise an exception if its permissions are too broad.\r\n- When passing it to programs, they shouldn't be passed through the command line, or other users can find them through ps.\r\n- When manipulating credentials in a language like Ruby, it should be as hard as possible to leak secrets through logs or traces.\r\n\r\nUsing command-line AWS tools seemed to be painful as well:\r\n\r\n- There seemed to be no simple way to maintain a set of AWS credentials for multiple identities, and pick one quickly.\r\n- Different tools can use different environment variables, or offer different configuration file formats.\r\n\r\nWe wanted to address this problem with:\r\n\r\n- A simple file format and well-known location, that could be easily reimplemented;\r\n- A simple yet flexible Ruby API, so future tools do not need to reinvent the wheel;\r\n- A command-line utility to easily pass the credentials of your choice to command line utilities.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'aws-creds'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install aws-creds\r\n\r\n## Usage\r\n\r\n### Storage\r\n\r\nPut your AWS credentials in `~/.awscreds`, one line per credentials, with the following colon-separated fields:\r\n\r\n- A name for your credentials (the magic name \"default\" will be picked unless specified otherwise)\r\n- The Access Key ID (20 characters, alphanumeric)\r\n- The Secret Access Key (40 characters)\r\n\r\nFor example:\r\n\r\n    default:AKIAIOSFODNNDEADBEEF:WT8ftNba7siVx5UOoGzJSyd82uNCZAC8LCllzcWp\r\n    admin:AKIAIOO432MG8BADF00D:T60q14wrbyxl3Ed13VOFA/2G+nvJR/jgHC42jIH1\r\n\r\n### Command-line utility\r\n\r\n`awc --help` should guide you.\r\n\r\nTo list the available credentials, use `-l`:\r\n\r\n    $ awc -li admin\r\n     default\r\n    *admin\r\n\r\nTo call `myscript put` and provide it with credentials, use:\r\n\r\n    $ awc myscript put\r\n\r\nIts effects can easily be inspected:\r\n\r\n    $ awc -i admin env | grep AWS\r\n    AWS_ACCESS_KEY=AKIAIOO432MG8BADF00D\r\n    AWSAccessKeyId=AKIAIOO432MG8BADF00D\r\n    AWS_ACCESS_KEY_ID=AKIAIOO432MG8BADF00D\r\n    AWS_SECRET_KEY=T60q14wrbyxl3Ed13VOFA/2G+nvJR/jgHC42jIH1\r\n    AWSSecretKey=T60q14wrbyxl3Ed13VOFA/2G+nvJR/jgHC42jIH1\r\n    AWS_SECRET_ACCESS_KEY=T60q14wrbyxl3Ed13VOFA/2G+nvJR/jgHC42jIH1\r\n\r\n### Ruby API\r\n\r\nThe Ruby gem should be easy to use (feedback is obviously welcome).\r\n\r\nDocumentation could be improved; in the meantime, here is a simple example:\r\n\r\n    require 'aws/creds'\r\n    require 'aws'\r\n    creds = AWS::Creds[:default]\r\n    STDERR.puts \"Using access key #{creds.access_key_id}\"\r\n    AWS.config creds.to_hash\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}